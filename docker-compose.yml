services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: yy-salon-db
    restart: unless-stopped
    env_file:
      - ./backend/.env.local
    environment:
      POSTGRES_DB: ${DB_NAME:-yy_beauty_salon}
      POSTGRES_USER: ${DB_USER:-salon_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - yy-salon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U salon_admin -d yy_beauty_salon"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: yy-salon-redis
    restart: unless-stopped
    env_file:
      - ./backend/.env.local
    command: redis-server --requirepass ${REDIS_PASSWORD:-RedisPassword123!}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - yy-salon-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "RedisPassword123!", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: yy-salon-api
    restart: unless-stopped
    env_file:
      - ./backend/.env.local
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://salon_admin:SecurePassword123!@postgres:5432/yy_beauty_salon
      REDIS_URL: redis://default:RedisPassword123!@redis:6379
      FRONTEND_URL: http://localhost:3000
    ports:
      - "8000:8000"
      - "5555:5555"  # Prisma Studio
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - yy-salon-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: yy-salon-frontend
    restart: unless-stopped
    env_file:
      - ./frontend/.env.local
    environment:
      VITE_API_URL: http://localhost:8000
    ports:
      - "3000:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - yy-salon-network
    depends_on:
      - backend
    stdin_open: true
    tty: true

networks:
  yy-salon-network:
    driver: bridge
    name: yy-salon-network

volumes:
  postgres_data:
    name: yy-salon-postgres-data
  redis_data:
    name: yy-salon-redis-data
